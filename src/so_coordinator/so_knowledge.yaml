# ChemotaxisGe - Example XXX
ReachGoal: {
  buffer: {bf_chem: {} },
  mechanisms: {m_chem: [ChemotaxisGe, {buffer: 'bf_chem', moving: False, static: True}]},
  activators: {a_bool: [BooleanActivator, {}],
               a_lin: [LinearActivator, {zeroActivationValue: 2.0, fullActivationValue: 0.0, minActivation: 0.0, maxActivation: 1.0}]},
  sensors: {s_goal: [GradientSensor, {mechanism: 'm_chem'}],
            s_goal_reached: [GradientSensor, {mechanism: 'm_chem', sensor_type: goal}],
            s_dist: [GradientSensor, {mechanism: 'm_chem', sensor_type: goal}]},
  conditions: {c_goal: [VectorBoolCondition, {sensor: 's_goal', activator: 'a_bool'}, False],
               c_goal_reached: [GoalBoolCondition, {sensor: 's_goal_reached', activator: 'a_bool'}, False],
               c_dist: [VectorDistCondition, {sensor: 's_dist', activator: 'a_lin'}, True]},
  behaviours: {b_chem: [MoveBehaviour, {mechanism: 'm_chem', motion_topic: True, effects: [[[None, 'c_dist'], -1.0, float], [[None, 'c_goal_reached'], 1.0, bool]]}]},
  preconditions: {b_chem: [[Negation, 'c_goal_reached'], [None, 'c_dist'], [None, 'c_goal']]},
  goals: {g_chem: [GoalBase, {permanent: False, conditions: [[None, 'c_goal_reached']]}]}
}

# FlockingRey + Chemotaxis - Example XXX
CollectiveExploration: {
  buffer: {bf_flocking: {view_distance: 2.0} },
  mechanisms: {m_flocking: [FlockingRey, {buffer: 'bf_flocking', maxvel: 0.75}],
               m_chemotaxis: [ChemotaxisBalch, {buffer: 'bf_flocking', maxvel: 0.25, moving: False, static: True} ]},
  activators: {a_bool: [BooleanActivator, {} ] },
  sensors: {s_flocking: [GradientSensor, {mechanism: ['m_flocking', 'm_chemotaxis']}] },
  conditions: {c_flocking: [VectorBoolCondition, {sensor: 's_flocking', activator: 'a_bool'}, False] },
  behaviours: {b_flocking: [MoveBehaviour, {mechanism: ['m_flocking', 'm_chemotaxis'], motion_topic: True, 'effects': [[[None, 'c_flocking'], -1.0, bool]] } ] },
  preconditions: {b_flocking: [[None, 'c_flocking']] },
  goals: { }
}

# FlockingRey - Example 6 of flockingrey_single/multi_sim.launch
FormationControl: {
  buffer: {bf_flocking: {view_distance: 2.0} },
  mechanisms: {m_flocking: [FlockingRey, {buffer: 'bf_flocking', maxvel: 1.0}],
               m_random: [Exploration, {buffer: 'bf_flocking', minvel: 0.5}]},
  activators: {a_bool: [BooleanActivator, {} ] },
  sensors: {s_flocking: [GradientSensor, {mechanism: 'm_flocking'}] },
  conditions: {c_flocking: [VectorBoolCondition, {sensor: 's_flocking', activator: 'a_bool'}, False] },
  behaviours: {b_flocking: [MoveBehaviour, {mechanism: 'm_flocking', motion_topic: True, effects: [[[None, 'c_flocking'], -1.0, bool]] } ],
               b_random: [MoveBehaviour, {mechanism: 'm_random', motion_topic: True, effects: [[[None, 'c_flocking'], 1.0, bool]]}]},
  preconditions: {b_flocking: [[None, 'c_flocking']],
                  b_random: [[Negation, 'c_flocking']]},
  goals: { }
}

# MorphogenesisBarycenter + ChemotaxisBalch - Example morphogenesissim.launch (rhbpSelforganizationTest)
CircleFormation: {
  buffer: { bf_morph: {aggregation: {'DEFAULT': newframe}, view_distance: 2.0} },
  mechanisms: { m_morph: [MorphogenesisBarycenter, {buffer: 'bf_morph', frame: morphogenesis, key: dist, moving: True, static: False, center_frame: Center} ],
                m_chem: [ChemotaxisBalch, {buffer: 'bf_morph', moving: False, static: True, minvel: 1.0, frames: ['Center']}] },
  activators: { a_bool: [BooleanActivator, {} ] },
  sensors: { s_morph: [GradientSensor, {mechanism: 'm_morph', sensor_type: value}],
             s_value: [KnowledgeFactSensor, {pattern: [value, '*']}],
             s_state: [GradientSensor, {mechanism: 'm_morph', sensor_type: state} ],
             s_last_state: [KnowledgeFactSensor, {pattern: [state, '*']}],
             s_goal: [GradientSensor, {mechanism: 'm_chem'}],
             s_goal_reached: [GradientSensor, {mechanism: 'm_chem', sensor_type: goal}] },
  conditions: { c_morph: [ChangeFloatCondition, {sensors: ['s_morph', 's_value'], activator: 'a_bool'}, False],
                c_state: [ChangeStringCondition, {sensors: ['s_state', 's_last_state'], activator: 'a_bool'}, False],
                c_goal: [VectorBoolCondition, {sensor: 's_goal', activator: 'a_bool'}, False],
                c_goal_reached: [GoalBoolCondition, {sensor: 's_goal_reached', activator: 'a_bool'}, False] },
  behaviours: { b_morph: [DecisionBehaviour, {mechanism: 'm_morph', effects: [[[None, 'c_morph'], -1.0, bool], [[None, 'c_state'], -1.0, bool], [[None, 'c_goal'], 1.0, bool]], value_key: value, state_key: state}],
                b_chem: [MoveBehaviour, {mechanism: 'm_chem', motion_topic: True, effects: [[[None, 'c_goal_reached'], 1.0, bool]], }] },
  preconditions: {b_morph: [[Disjunction, [[None, 'c_morph'], [None, 'c_state']]]],
                  b_chem: [[Negation, 'c_goal_reached'], [None, 'c_goal'], [Negation, [Disjunction, [[None, 'c_morph'], [None, 'c_state']]]]]},
  goals: { g_morph: [GoalBase, {permanent: False, conditions: [[None, 'c_goal_reached']]}]}
}

# Ant Foraging: Explore and Exploit - Example foraging_multi_sim.launch / foraging_single_sim.launch
Foraging: {
  buffer: { bf_pheromone: {view_distance: 1.5, min_diffusion: 0.3, aggregation_distance: 0.1, store_all: False, framestorage: ['Pheromone', 'robot'], ev_thread: True, ev_time: 1},
            bf_gradient: {view_distance: 1.5, aggregation_distance: 0.1, store_all: False, ev_thread: True, ev_time: 1, framestorage: ['Nest', 'Food', 'robot']} },
  mechanisms: { m_repulsion: [CollisionAvoidance, {buffer: 'bf_gradient', moving: True, static: False, maxvel: 0.5}],
                m_deposit_pheromones: [DepositPheromones, {buffer: 'bf_gradient', frames: ['Nest'], moving: True, minvel: 0.5, maxvel: 1.0, ev_factor: 0.9, ev_time: 5}],
                m_return_nest: [ChemotaxisGe, {buffer: 'bf_gradient', moving: True, static: True, frames: ['Nest'], minvel: 0.5, maxvel: 1.0}],
                m_decision: [ForagingDecision, {probability: 0.5}],
                m_exploitation: [Exploitation, {buffer: 'bf_pheromone', frames: ['Pheromone'], minvel: 0.5, maxvel: 1.0} ],
                m_follow_food: [ChemotaxisGe, {buffer: 'bf_gradient', static: True, moving: True, frames: ['Food'], minvel: 0.5}],
                m_sense_trail: [FollowAll, {buffer: 'bf_pheromone', moving: False, frames: ['Pheromone']}],
                m_exploration: [Exploration, {buffer: 'bf_gradient', minvel: 0.5}] },
  activators: { a_bool: [BooleanActivator, {}],
                a_f_bool: [BooleanActivator, {desiredValue: False}]},
  sensors: { s_food: [GradientSensor, {mechanism: 'm_follow_food', sensor_type: goal}],
             s_food_reached: [GradientSensor, {mechanism: 'm_follow_food', sensor_type: goal, initial_value: True}],
             s_nest_reached: [GradientSensor, {mechanism: 'm_deposit_pheromones', sensor_type: goal, initial_value: True}],
             s_exploit: [KnowledgeSensor, {pattern: [state, 'Exploitation']}],
             s_explore: [KnowledgeSensor, {pattern: [state, 'Exploration']}],
             s_trail: [GradientSensor, {mechanism: 'm_exploitation'}],
             s_trail_view: [GradientSensor, {mechanism: 'm_sense_trail'}],
             s_return: [KnowledgeSensor, {pattern: [state, 'Return']}],
             s_none: [KnowledgeSensor, {pattern: [state, 'None']}],
             s_max_dist: [GradientSensor, {mechanism: 'm_deposit_pheromones', sensor_type: goal, initial_value: True}],
             s_no_state: [KnowledgeSensor, {pattern: [state, '*']}]},
  conditions: { c_food: [VectorBoolCondition, {sensor: 's_food', activator: 'a_bool'}, False],
                c_food_reached: [GoalBoolCondition, {sensor: 's_food_reached', activator: 'a_bool'}, False],
                c_nest_reached: [GoalBoolCondition, {sensor: 's_nest_reached', activator: 'a_bool'}, False],
                c_exploit: [BoolFCondition, {sensor: 's_exploit', activator: 'a_bool'}, False],
                c_exploration: [BoolFCondition, {sensor: 's_explore', activator: 'a_bool'}, False],
                c_trail: [VectorBoolCondition, {sensor: 's_trail', activator: 'a_bool'}, False],
                c_trail_view: [VectorBoolCondition, {sensor: 's_trail_view', activator: 'a_bool'}, False],
                c_return: [BoolFCondition, {sensor: 's_return', activator: 'a_bool'}, False],
                c_none: [BoolFCondition, {sensor: 's_none', activator: 'a_bool'}, False],
                c_max_dist: [MaxDistCondition, {sensor: 's_max_dist', activator: 'a_bool', max: 7}, False],
                c_no_state: [BoolTCondition, {sensor: 's_no_state', activator: 'a_f_bool'}, False] },
  behaviours: { b_decision: [DecisionStateBehaviour, {mechanism: 'm_decision', state_key: state, effects: [[[None, 'c_exploration'], 1.0, bool], [[None, 'c_exploit'], 1.0, bool]]}],
                b_return_state: [SetStateBehaviour, {state: 'Return', state_key: state, effects: [[[None, 'c_return'], -1.0, bool]]}],
                b_lost: [SetStateBehaviour, {state: 'None', state_key: state, effects: [[[None, 'c_none'], -1.0, bool]]}],
                b_no_trail: [SetStateBehaviour, {state: 'None', state_key: state, effects: [[[None, 'c_none'], -1.0, bool]]}],
                b_max_dist: [SetStateBehaviour, {state: 'None', state_key: state, effects: [[[None, 'c_none'], -1.0, bool]]}],
                b_no_state: [SetStateBehaviour, {state: 'None', state_key: state, effects: [[[None, 'c_none'], -1.0, bool]]}],
                b_return: [MoveBehaviour, {mechanism: 'm_return_nest', motion_topic: True, effects: [[[None, 'c_nest_reached'], 1.0, bool]]}],
                b_deposit: [MoveBehaviour, {mechanism: 'm_deposit_pheromones', motion_topic: True, effects: [[[None, 'c_nest_reached'], 1.0, bool]]}],
                b_follow_food: [MoveBehaviour, {mechanism: 'm_follow_food', motion_topic: True, effects: [[[None, 'c_food_reached'], 1.0, bool]]}],
                b_exploit: [MoveBehaviour, {mechanism: ['m_exploitation', 'm_repulsion'], motion_topic: True, effects: [[[None, 'c_food'], 1.0, bool]]}],
                b_turn: [TurnBehaviour, {mechanism: 'm_exploitation', motion_topic: True, effects: [[[None, 'c_trail'], 1.0, bool]]}],
                b_explore: [MoveBehaviour, {mechanism: ['m_exploration', 'm_repulsion'], motion_topic: True, effects: [[[None, 'c_food'], 1.0, bool]]}] },
  preconditions: {b_decision: [[None, 'c_nest_reached'], [Disjunction, [[None, 'c_return'], [None, 'c_none']]]],
                  b_return_state: [[None, 'c_food_reached'], [Negation, 'c_return']],
                  b_lost: [[None, 'c_exploit'], [Negation, 'c_food'], [Negation, 'c_food_reached'], [Negation, 'c_nest_reached'], [Negation, 'c_trail']],
                  b_no_trail: [[None, 'c_exploit'], [Negation, 'c_food'], [Negation, 'c_trail_view'], [None, 'c_nest_reached']],
                  b_max_dist:  [[None, 'c_max_dist'], [None, 'c_exploration']],
                  b_no_state: [[None, 'c_no_state']],
                  b_return: [[Negation, 'c_nest_reached'], [None, 'c_none']],
                  b_deposit: [[Negation, 'c_nest_reached'], [None, 'c_return']],
                  b_follow_food: [[Conjunction, [[None, 'c_food'], [Negation, 'c_food_reached']]], [Disjunction, [[None, 'c_exploit'], [None, 'c_exploration']]]],
                  b_exploit: [[Conjunction, [[None, 'c_trail'], [Negation, 'c_food']]], [None, 'c_exploit']],
                  b_turn: [[Conjunction, [[Negation, 'c_trail'], [None, 'c_trail_view']]], [None, 'c_nest_reached'], [None, 'c_exploit']],
                  b_explore: [[Conjunction, [[Negation, 'c_food'], [Negation, 'c_food_reached']]], [Conjunction, [[None, 'c_exploration'], [Negation, 'c_max_dist']]]] },
  goals: { goal: [GoalBase, {permanent: False, conditions: [[None, 'c_food']]}]}
}

# Exploration (each agent on its own) - elements of Example quorum_single/multi_sim.launch
IndividualExploration: {
  buffer: {bf_ex: {view_distance: 2.0} },
  mechanisms: {m_chem: [ChemotaxisGe, {buffer: 'bf_ex', static: True, moving: True, minvel: 0.5}],
               m_ex: [Exploration, {buffer: 'bf_ex', minvel: 0.5}],
               m_rep: [CollisionAvoidance, {buffer: 'bf_ex', moving: True, static: False, maxvel: 0.5}]},
  activators: { a_bool: [BooleanActivator, {} ] },
  sensors: {s_grad: [GradientSensor, {mechanism: 'm_chem', sensor_type: goal}],
            s_grad_reached: [GradientSensor, {mechanism: 'm_chem', sensor_type: goal, initial_value: True}] },
  conditions: {c_grad: [VectorBoolCondition, {sensor: 's_grad', activator: 'a_bool'}, False],
               c_grad_reached: [GoalBoolCondition, {sensor: 's_grad_reached', activator: 'a_bool'}, False] },
  behaviours: {b_chem: [MoveBehaviour, {mechanism: 'm_chem', motion_topic: True, effects: [[[None, 'c_grad_reached'], 1.0, bool]]}],
               b_ex: [MoveBehaviour, {mechanism: ['m_ex', 'm_rep'], motion_topic: True, effects: [[[None, 'c_grad'], 1.0, bool]]}]},
  preconditions: {b_chem: [[Conjunction, [[None, 'c_grad'], [Negation, 'c_grad_reached']]]],
                  b_ex: [[Conjunction, [[Negation, 'c_grad'], [Negation, 'c_grad_reached']]]] },
  goals: {g_chem: [GoalBase, {permanent: False, conditions: [[None, 'c_grad_reached']]}]}
}








# MorphogenesisBarycenter - Example XXX
FindBarycenter: {
  buffer: { bf_morph: {aggregation: {'DEFAULT': newframe}, view_distance: 2.0} },
  mechanisms: { m_morph: [MorphogenesisBarycenter, {buffer: 'bf_morph', frame: morphogenesis, key: dist, moving: True, static: False, center_frame: Center}] },
  activators: { a_bool: [BooleanActivator, {} ] },
  sensors: { s_morph: [GradientSensor, {mechanism: 'm_morph', sensor_type: value}],
             s_value: [KnowledgeFactSensor, {pattern: [value, '*']}],
             s_state: [GradientSensor, {mechanism: 'm_morph', sensor_type: state} ],
             s_last_state: [KnowledgeFactSensor, {pattern: [state, '*']}] },
  conditions: { c_morph: [ChangeFloatCondition, {sensors: ['s_morph', 's_value'], activator: 'a_bool'}, False],
                c_state: [ChangeStringCondition, {sensors: ['s_state', 's_last_state'], activator: 'a_bool'}, False] },
  behaviours: { },
  preconditions: { },
  goals: { }
}


# GossipMax - Example XXX
MaxValue: { }

# Chemotaxis Collision Avoidance mechanism - Example XXX
CollisionAvoidance: { }


# Repulsion - Example XXX
AvoidAgentCollisions: { }


# RepulsionFernandez - Example XXX
UniformDistribution: { }

